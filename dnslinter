#!/usr/bin/env perl

use strict;
use warnings;
use v5.10;

use Data::Dumper;
use File::Basename;
use Getopt::Long::Descriptive;
use IO::All;
use NetAddr::IP qw(:lower);
use Net::Oping;
use Regexp::Common qw /net/;
use Socket qw(:DEFAULT getaddrinfo getnameinfo inet_pton NI_NAMEREQD NI_NUMERICHOST NIx_NOSERV);

my ( $opt, $usage ) = describe_options(
    "%c %o",
    [ 'networks|n=s', 'A comma separated list of networks, or name of a file containing networks, one per line.', { required => 1 } ],
    [ 'ping|p',       'Enable ping checks - requires root.' ],
    [ 'verbose|v',    'Explain what is happening.' ],
    [ 'fail|f',       'Report failing DNS mappings (default).',                                                   { default  => 1 } ],
    [ 'okay|o',       'Report okay DNS mappings (default).',                                                      { default  => 1 } ],
    [ 'nofail|F',     'Do not report failing DNS mappings.',                                                      { default  => 0 } ],
    [ 'nokay|O',      'Do not report okay DNS mappings.',                                                         { default  => 0 } ],
    [ 'summary|s',    'Show a summary of findings.' ],
);

my $network = $opt->networks;
my $ping    = $opt->ping;
my $verbose = $opt->verbose;
my $fail    = $opt->fail;
my $okay    = $opt->okay;
my $nofail  = $opt->nofail;
my $nokay   = $opt->nokay;
my $summary = $opt->summary;

if ($nofail) {
    $fail = 0;
}

if ($nokay) {
    $okay = 0;
}

my $errors      = 0;
my $okays       = 0;
my $pingables   = 0;
my $unpingables = 0;
my $tested      = 0;

if ($ping) {
    my $pinger = Net::Oping->new();
    $pinger->host_add('127.0.0.1');
    $pinger->ping();
    my $error = $pinger->get_error();
    if ( $error =~ /Operation not permitted/ ) {
        fail('Ping checks require root privilege to run.');
        exit 1;
    }
}

my @ipranges = get_netblocks();

foreach my $range (@ipranges) {
    verbose("Processing '$range'.");

    my $thisrange = new NetAddr::IP($range);
    my $ip        = $thisrange->first();
    my $lastip    = $thisrange->last();
    my $ipcount   = $thisrange->num();

    while ( $ipcount > 0 ) {
        $ipcount--;
        my $thisip = $ip->short();
        $ip++;

        verbose("Pondering $thisip.");
        $tested++;

        my ( $err, $hostname ) = _ip_to_hostname($thisip);
        unless ($err) {
            verbose("$thisip resolves to $hostname");
        }

        if ($ping) {
            verbose("Pinging $thisip");
            my $pinger = Net::Oping->new();
            $pinger->host_add($thisip);
            $pinger->ping();
            my $dropped = $pinger->get_dropped();
            if ( $dropped->{$thisip} == 0 ) {
                $pingables++;
                unless ( defined $hostname ) {
                    fail("$thisip responds to pings but has no PTR.");
                    $errors++;
                    next;
                }
            } else {
                $unpingables++;
            }
        }

        next unless defined $hostname;

        my @addresses;
        my @results;

        ( $err, @results ) = getaddrinfo( $hostname, "", { socktype => SOCK_RAW } );
        while ( my $ai = shift @results ) {
            my ( $err, $ipaddr ) = getnameinfo( $ai->{addr}, NI_NUMERICHOST, NIx_NOSERV );
            push @addresses, $ipaddr unless $err;
        }

        my $found = scalar grep( /^$thisip$/, @addresses );
        if ( $found == 0 ) {
            fail("No PTR present for $hostname -> $thisip.");
            $errors++;
        } else {
            okay("PTR present for $thisip -> $hostname.");
            $okays++;
        }

    }
}

if ($summary) {
    my $text = "Summary: $tested IP";
    $text .= $tested != 1 ? 's' : '';
    $text .= " tested, $okays okay, $errors error";
    $text .= $errors != 1 ? 's' : '';
    if ($ping) {
        $text .= ", $pingables pingable, $unpingables unpingable";
    }
    $text .= ".";
    say $text;
}

sub _ip_to_hostname {
    my $ip = shift;
    my ( $error, $hostname );
    if ( $ip =~ $RE{net}{IPv6} ) {
        ( $error, $hostname ) = getnameinfo( pack_sockaddr_in6( 0, inet_pton( AF_INET6, $ip ) ), NI_NAMEREQD, NI_NAMEREQD );
    } elsif ( $ip =~ $RE{net}{IPv4} ) {
        ( $error, $hostname ) = getnameinfo( pack_sockaddr_in( 0, inet_pton( AF_INET, $ip ) ), NI_NAMEREQD, NI_NAMEREQD );
    } else {
        die "$ip is not an IPv4 or IPv6 address.";
    }
    return ( $error, $hostname );
}

sub get_netblocks {
    my @blocks   = ();
    my $networks = $opt->networks;

    if ( -e "$networks" ) {
        @blocks = io("$networks")->slurp;
        chomp(@blocks);
    } else {
        @blocks = split( /,/, $networks );
    }

    return @blocks;
}

sub fail {
    return unless $fail || $verbose;
    my $message = shift;
    say "FAIL: $message";
}

sub okay {
    return unless $okay || $verbose;
    my $message = shift;
    say "OK: $message";
}

sub verbose {
    return unless $verbose;
    my $message = shift;
    say "INFO: $message";
}
